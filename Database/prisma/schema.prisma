// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  firstName          String
  lastName           String
  handler            String       @unique
  email              String       @unique
  password           String
  gender             GenderEnum   @default(notdefined)
  country            String?
  phone              String?
  photo              String?
  coverImage         String?
  NID_Verified       Boolean?     @default(false)
  isInstructor       Boolean?     @default(false)
  jobTitle           String?
  bio                String?
  experience         String?
  hourlyRate         Float?
  paidBalance        Float?       @default(0.0)
  unPaidBalance      Float?       @default(0.0)
  availability       Boolean?     @default(false)
  freeSession        Boolean?     @default(false)
  discount           Float?
  rating             Float?       @default(0.0)
  resetToken         String?
  resetTokenExpires  DateTime?
  changedPasswordAt  DateTime?
  loggedOutAt        DateTime?
  role               RoleEnum     @default(CLIENT)
  topics             UserTopics[]
  bookedSlots        BookedSlot[]
  instructorSessions Session[]    @relation("Instructor")
  clientSession      Session[]    @relation("Client")
  clientPayments     Payment[]    @relation("ClientPayement")
  instructorPayments Payment[]    @relation("InstructorPayment")
}

model Topic {
  id       String          @id @default(uuid())
  name     String          @unique
  users    UserTopics[]
  sessions SessionTopics[]
}

model UserTopics {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String

  @@id([userId, topicId])
}

model Session {
  id                String            @id @default(uuid())
  date              DateTime
  notes             String?
  status            SessionStatusEnum @default(pending)
  bookedSlots       BookedSlot[]
  Instructor        User?             @relation("Instructor", fields: [instructorHandler], references: [handler])
  instructorHandler String?
  Client            User?             @relation("Client", fields: [clientHandler], references: [handler])
  clientHandler     String?
  topics            SessionTopics[]
  Payment           Payment[]
}

model SessionTopics {
  topic     Topic   @relation(fields: [topicId], references: [id])
  topicId   String
  session   Session @relation(fields: [seesionId], references: [id])
  seesionId String

  @@id([topicId, seesionId])
}

model BookedSlot {
  id           String   @id @default(uuid())
  startTime    DateTime
  endTime      DateTime
  rate         Float
  order        Int
  instructor   User     @relation(fields: [instructorId], references: [id])
  instructorId String
  session      Session  @relation(fields: [sessionId], references: [id])
  sessionId    String
}

model Payment {
  id           String   @id @default(uuid())
  price        Float
  isPaid       Boolean  @default(false)
  isPaidAt     DateTime @default(now())
  isDeliverd   Boolean  @default(false)
  instructor   User     @relation("InstructorPayment", fields: [instructorId], references: [id])
  instructorId String
  client       User     @relation("ClientPayement", fields: [clientId], references: [id])
  clientId     String
  session      Session  @relation(fields: [sessionId], references: [id])
  sessionId    String
}

enum RoleEnum {
  ADMIN
  CLIENT
  INSTRUCTOR
}

enum GenderEnum {
  male
  female
  notdefined
}

enum SessionStatusEnum {
  pending
  canceled
  running
  deliverd
}
